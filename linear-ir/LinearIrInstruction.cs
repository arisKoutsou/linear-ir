
using System;
using System.Collections.Generic;
using Mono.Cecil.Cil;

public class LinearIrInstruction {

    public String Name { get; private set; }
    public ICollection<String> InputRegisters { get; private set; }
    public ICollection<String> OutputRegisters { get; private set; }

    public LinearIrInstruction(String name, ICollection<String> oRegs, ICollection<String> iRegs) {
        Name = name;
        InputRegisters = iRegs;
        OutputRegisters = oRegs;
    }
    
    // /// <summary>
    // ///     Corresponds to the CIL instruction of the stack based IR.
    // ///     For example if this instruction is the add instruction between
    // ///     two registers, then the value of this property is the instruction
    // ///     generated by Cecil library.
    // /// </summary>
    // public Instruction CilInstruction { get; private set; }

    // /// <summary>
    // ///     Always initialize the linear ir instruction with it's
    // ///     corresponding Cecil instruction.
    // /// </summary>
    // /// <param name="i"> An instruction generated by Cecil library </param>
    // public LinearIrInstruction(Instruction i) {
    //     CilInstruction = i;
    // }

    /// <summary>
    ///     The string representation remains the same across
    ///     stack based and linear ir. This may change later (TODO).
    /// </summary>
    public override String ToString() {
        return Name + " " + String.Join(" ", OutputRegisters) 
            + (OutputRegisters.Count > 0 && InputRegisters.Count > 0 ? " <- " : String.Empty)
            + String.Join(" ", InputRegisters);
    }
}