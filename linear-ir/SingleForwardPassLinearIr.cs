using Mono.Cecil;

/// <summary>
///   This object performs a single pass on the method's instructions
///   and generates the linear ir code.
/// </summary>
public class SingleForwardPassLinearIr : LinearIr
{
  /// <summary>
  ///   Initializes a new LinearIr object by performing a single forward
  ///   pass to the method definition body instructions.
  /// </summary>
  /// <param name="methodDefinition"> A method definition generated by cecil library. </param>
  public SingleForwardPassLinearIr(MethodDefinition methodDefinition)
    : base(methodDefinition)
  {    
    // Populate the array of instructions with the generated instructions.
    SetLinearIrInstructions();
  }

  /// <summary>
  ///   Perform a single pass on the method's instructions. 
  ///   Get the linear instruction and place it into it's 
  ///   position in the instruction array.
  /// </summary>
  private void SetLinearIrInstructions()
  {
    // Create an empty array of instructions.
    // The number of instructions DOESN'T change across linear-stackbased
    // representations.
    var instructionArray = new LinearIrInstruction[MethodDefinition.Body.Instructions.Count];

    for (int i = 0; i < MethodDefinition.Body.Instructions.Count; i++)
    {
      var stackBasedIrInstruction = MethodDefinition.Body.Instructions[i];
      var linearIrInstruction = GetLinearIrInstructionFrom(stackBasedIrInstruction);
      instructionArray[i] = linearIrInstruction;
      // The .NET cil code guarantees that the next instruction after
      // an unconditional jump will be executed with an empty stack.
      if (!stackBasedIrInstruction.HasFallthroughInstruction())
        evaluationStackSize = 0;
    }

    Instructions = instructionArray;
  }
}