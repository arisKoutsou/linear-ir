Mono Ahead of Time compiler - compiling assembly /home/aris/Desktop/di/thesis/hello/Program.exe
converting method hello.MainClass:.ctor ()
creating vars
created temp 0 (R16) of type System.IntPtr
	this:  arg R16 <-
creating locals
locals done
method to IR hello.MainClass:.ctor ()
REGION BB0 IL_0000 ID_FFFFFFFF
REGION BB3 IL_0000 ID_FFFFFFFF
REGION BB2 IL_0006 ID_FFFFFFFF
REGION BB1 IL_0000 ID_FFFFFFFF

AFTER METHOD-TO-IR 0: [IN: , OUT:  BB3(0) ]

AFTER METHOD-TO-IR 3: [IN:  BB0(0), OUT:  BB2(0) ]

AFTER METHOD-TO-IR 2: [IN:  BB3(0), OUT:  BB1(0) ]
 move R17 <- R16
 nop
 br [B1]

AFTER METHOD-TO-IR 1: [IN:  BB2(0), OUT:  ]
remove_block_if_useless, removed BB3
br removal triggered 2 -> 1

HANDLE-GLOBAL-VREGS BLOCK 0:

HANDLE-GLOBAL-VREGS BLOCK 2:
 move R17 <- R16
 nop

HANDLE-GLOBAL-VREGS BLOCK 1:
BB0 IN: 
BB2 IN: 0 
BB1 IN: 2 
DTREE hello.MainClass:.ctor () 0
BB0(dfn=0) (IDOM=BB-1):  BB0
BB2(dfn=1) (IDOM=BB0):  BB0 BB2
BB1(dfn=2) (IDOM=BB2):  BB0 BB2 BB1

BEFORE LOWER-VTYPE-OPTS  0: [IN: , OUT:  BB2(1) ]

AFTER LOWER-VTYPE-OPTS  0: [IN: , OUT:  BB2(1) ]

BEFORE LOWER-VTYPE-OPTS  2: [IN:  BB0(0), OUT:  BB1(2) ]

AFTER LOWER-VTYPE-OPTS  2: [IN:  BB0(0), OUT:  BB1(2) ]

BEFORE LOWER-VTYPE-OPTS  1: [IN:  BB2(1), OUT:  ]

AFTER LOWER-VTYPE-OPTS  1: [IN:  BB2(1), OUT:  ]

LIVENESS:
BLOCK BB0 (BB2, ):
GEN  BB0: {}
KILL BB0: {}
BLOCK BB2 (BB1, ):
GEN  BB2: {}
KILL BB2: {}
BLOCK BB1 ():
GEN  BB1: {}
KILL BB1: {}

ITERATION:
P: BB1(2): IN: BB2 OUT:
P: BB2(1): IN: BB0 OUT:BB1 
	LIVE IN  BB2: {}
P: BB0(0): IN: OUT:BB2 
	LIVE IN  BB0: {}
IT: 3 2.
LIVE IN  BB1: {}
LIVE OUT BB1: {}
LIVE IN  BB2: {}
LIVE OUT BB2: {}
LIVE IN  BB0: {}
LIVE OUT BB0: {}
V0: [0x0 - 0x0]
LIVENESS 2 hello.MainClass:.ctor ()
LIVENESS BLOCK BB1:
LIVENESS BLOCK BB2:
LIVENESS BLOCK BB0:

SPILL BLOCK 0:

SPILL BLOCK 2:

SPILL BLOCK 1:
CFA: [0] def_cfa: %rsp+0x8
CFA: [0] offset: unknown at cfa-0x8
CFA: [4] def_cfa_offset: 0x10
Basic block 0 starting at offset 0x4
Basic block 2 starting at offset 0x4
Basic block 1 starting at offset 0x4
CFA: [8] def_cfa: %rsp+0x8
Method hello.MainClass:.ctor () emitted at 0x40949ba0 to 0x40949ba9 (code length 9) [Program.exe]

/tmp/.U815s3:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <lo_MainClass__ctor>:
<BB>:1
   0:	48 83 ec 08          	sub    $0x8,%rsp
   4:	48 83 c4 08          	add    $0x8,%rsp
   8:	c3                   	retq   
converting method hello.MainClass:Main (string[])
creating vars
created temp 0 (R16) of type System.String[]
	arg [0]:  arg R16 <-
creating locals
locals done
method to IR hello.MainClass:Main (string[])
INLINE START 0x2114cf8 hello.MainClass:Main (string[]) -> hello.MainClass:Add (int,int)
created temp 1 (R19) of type System.Int64
method to IR hello.MainClass:Add (int,int)
created temp 2 (R20) of type System.Int32
created temp 3 (R21) of type System.Int32
INLINE END hello.MainClass:Main (string[]) -> hello.MainClass:Add (int,int)
REGION BB0 IL_0000 ID_FFFFFFFF
REGION BB3 IL_0000 ID_FFFFFFFF
REGION BB2 IL_0014 ID_FFFFFFFF
REGION BB1 IL_0000 ID_FFFFFFFF

AFTER METHOD-TO-IR 0: [IN: , OUT:  BB3(0) ]

AFTER METHOD-TO-IR 3: [IN:  BB0(0), OUT:  BB2(0) ]

AFTER METHOD-TO-IR 2: [IN:  BB3(0), OUT:  BB1(0) ]
 iconst R17 <- [1024]
 iconst R18 <- [4096]
 nop
 move R20 <- R17
 move R21 <- R18
 move R22 <- R20
 move R23 <- R21
 int_add R24 <- R22 R23 clobbers: 1
 sext_i4 R25 <- R24
 move R19 <- R25
 nop
 move R26 <- R19
 move R27 <- R26
 voidcall [System.Console:WriteLine (long)] [%rdi <- R27] clobbers: c
 br [B1]

AFTER METHOD-TO-IR 1: [IN:  BB2(0), OUT:  ]
remove_block_if_useless, removed BB3
br removal triggered 2 -> 1

HANDLE-GLOBAL-VREGS BLOCK 0:

HANDLE-GLOBAL-VREGS BLOCK 2:
 iconst R17 <- [1024]
 iconst R18 <- [4096]
 iconst R20 <- [1024]
 iconst R21 <- [4096]
 iconst R22 <- [1024]
 iconst R23 <- [4096]
 iconst R24 <- [5120]
 sext_i4 R25 <- R24
 move R19 <- R25
 move R26 <- R19
 move R27 <- R26
 voidcall [System.Console:WriteLine (long)] [%rdi <- R27] clobbers: c
 nop

HANDLE-GLOBAL-VREGS BLOCK 1:
CONVERTED R19(1) TO VREG.
CONVERTED R20(2) TO VREG.
CONVERTED R21(3) TO VREG.
	Reverse copyprop in BB2 on  move R27 <- R26
	Reverse copyprop in BB2 on  move R27 <- R19
	Reverse copyprop in BB2 on  move R27 <- R25
BB0 IN: 
BB2 IN: 0 
BB1 IN: 2 
DTREE hello.MainClass:Main (string[]) 0
BB0(dfn=0) (IDOM=BB-1):  BB0
BB2(dfn=1) (IDOM=BB0):  BB0 BB2
BB1(dfn=2) (IDOM=BB2):  BB0 BB2 BB1

BEFORE LOWER-VTYPE-OPTS  0: [IN: , OUT:  BB2(1) ]

AFTER LOWER-VTYPE-OPTS  0: [IN: , OUT:  BB2(1) ]

BEFORE LOWER-VTYPE-OPTS  2: [IN:  BB0(0), OUT:  BB1(2) ]
 iconst R24 <- [5120]
 sext_i4 R27 <- R24
 voidcall [System.Console:WriteLine (long)] [%rdi <- R27] clobbers: c

AFTER LOWER-VTYPE-OPTS  2: [IN:  BB0(0), OUT:  BB1(2) ]
 iconst R24 <- [5120]
 sext_i4 R27 <- R24
 voidcall [System.Console:WriteLine (long)] [%rdi <- R27] clobbers: c

BEFORE LOWER-VTYPE-OPTS  1: [IN:  BB2(1), OUT:  ]

AFTER LOWER-VTYPE-OPTS  1: [IN:  BB2(1), OUT:  ]

LIVENESS:
BLOCK BB0 (BB2, ):
GEN  BB0: {}
KILL BB0: {}
BLOCK BB2 (BB1, ):
	 iconst R24 <- [5120]
	 sext_i4 R27 <- R24
	 voidcall [System.Console:WriteLine (long)] [%rdi <- R27] clobbers: c
GEN  BB2: {}
KILL BB2: {}
BLOCK BB1 ():
GEN  BB1: {}
KILL BB1: {}

ITERATION:
P: BB1(2): IN: BB2 OUT:
P: BB2(1): IN: BB0 OUT:BB1 
	LIVE IN  BB2: {}
P: BB0(0): IN: OUT:BB2 
	LIVE IN  BB0: {}
IT: 3 2.
LIVE IN  BB1: {}
LIVE OUT BB1: {}
LIVE IN  BB2: {}
LIVE OUT BB2: {}
LIVE IN  BB0: {}
LIVE OUT BB0: {}
V0: [0x0 - 0x0]
LIVENESS 2 hello.MainClass:Main (string[])
LIVENESS BLOCK BB1:
LIVENESS BLOCK BB2:
	40004:  voidcall [System.Console:WriteLine (long)] [%rdi <- R27] clobbers: c
	40003:  sext_i4 R27 <- R24
	40002:  iconst R24 <- [5120]
LIVENESS BLOCK BB0:

SPILL BLOCK 0:

SPILL BLOCK 2:
 iconst R24 <- [5120]
	 i   24
	1  iconst R24 <- [5120]
 sext_i4 R27 <- R24
	 ii  27 24
	1  sext_i4 R27 <- R24
 voidcall [System.Console:WriteLine (long)] [%rdi <- R27] clobbers: c
	     -1
	1  voidcall [System.Console:WriteLine (long)] [%rdi <- R27] clobbers: c

SPILL BLOCK 1:

LOCAL REGALLOC BLOCK 2:
	1  iconst R24 <- [5120]
	2  sext_i4 R27 <- R24
	3  voidcall [System.Console:WriteLine (long)] [%rdi <- R27] clobbers: c
liveness: R24 [1 - 1]
liveness: R27 [2 - 2]
processing:	3  voidcall [System.Console:WriteLine (long)] [%rdi <- R27] clobbers: c
	assigned arg reg %rdi to R27
	3  voidcall [System.Console:WriteLine (long)] [%rdi <- R27] clobbers: c
processing:	2  sext_i4 R27 <- R24
	assigned dreg %rdi to dest R27
	freeable %rdi (R27) (born in 2)
	assigned sreg1 %rax to R24
	2  sext_i4 %rdi <- %rax
processing:	1  iconst R24 <- [5120]
	assigned dreg %rax to dest R24
	freeable %rax (R24) (born in 1)
	1  iconst %rax <- [5120]
CFA: [0] def_cfa: %rsp+0x8
CFA: [0] offset: unknown at cfa-0x8
CFA: [4] def_cfa_offset: 0x10
Basic block 0 starting at offset 0x4
Basic block 2 starting at offset 0x4
Basic block 1 starting at offset 0x11
CFA: [15] def_cfa: %rsp+0x8
Method hello.MainClass:Main (string[]) emitted at 0x40949bb0 to 0x40949bc6 (code length 22) [Program.exe]

/tmp/.0ITT2H:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <lo_MainClass_Main>:
<BB>:2
   0:	48 83 ec 08          	sub    $0x8,%rsp
   4:	b8 00 14 00 00       	mov    $0x1400,%eax
   9:	48 63 f8             	movslq %eax,%rdi
   c:	e8 8f be e7 fd       	callq  fffffffffde7bea0 <lo_MainClass_Main+0xfffffffffde7bea0>
<BB>:1
  11:	48 83 c4 08          	add    $0x8,%rsp
  15:	c3                   	retq   
converting method hello.MainClass:Add (int,int)
created temp 0 (R16) of type System.Int64
creating vars
created temp 1 (R17) of type System.Int32
created temp 2 (R18) of type System.Int32
	return :  arg R16 <-
	arg [0]:  arg R17 <-
	arg [1]:  arg R18 <-
creating locals
locals done
method to IR hello.MainClass:Add (int,int)
REGION BB0 IL_0000 ID_FFFFFFFF
REGION BB3 IL_0000 ID_FFFFFFFF
REGION BB2 IL_0004 ID_FFFFFFFF
REGION BB1 IL_0000 ID_FFFFFFFF

AFTER METHOD-TO-IR 0: [IN: , OUT:  BB3(0) ]

AFTER METHOD-TO-IR 3: [IN:  BB0(0), OUT:  BB2(0) ]

AFTER METHOD-TO-IR 2: [IN:  BB3(0), OUT:  BB1(0) ]
 move R19 <- R17
 move R20 <- R18
 int_add R21 <- R19 R20 clobbers: 1
 sext_i4 R22 <- R21
 move R16 <- R22
 br [B1]

AFTER METHOD-TO-IR 1: [IN:  BB2(0), OUT:  ]
CCOPY/2: R19 -> R17
CCOPY/2: R20 -> R18
remove_block_if_useless, removed BB3
br removal triggered 2 -> 1

HANDLE-GLOBAL-VREGS BLOCK 0:

HANDLE-GLOBAL-VREGS BLOCK 2:
 move R19 <- R17
 move R20 <- R18
 int_add R21 <- R17 R18 clobbers: 1
 sext_i4 R22 <- R21
 move R16 <- R22
 nop

HANDLE-GLOBAL-VREGS BLOCK 1:
	Reverse copyprop in BB2 on  move R16 <- R22
BB0 IN: 
BB2 IN: 0 
BB1 IN: 2 
DTREE hello.MainClass:Add (int,int) 0
BB0(dfn=0) (IDOM=BB-1):  BB0
BB2(dfn=1) (IDOM=BB0):  BB0 BB2
BB1(dfn=2) (IDOM=BB2):  BB0 BB2 BB1

BEFORE LOWER-VTYPE-OPTS  0: [IN: , OUT:  BB2(1) ]

AFTER LOWER-VTYPE-OPTS  0: [IN: , OUT:  BB2(1) ]

BEFORE LOWER-VTYPE-OPTS  2: [IN:  BB0(0), OUT:  BB1(2) ]
 int_add R21 <- R17 R18 clobbers: 1
 sext_i4 R16 <- R21

AFTER LOWER-VTYPE-OPTS  2: [IN:  BB0(0), OUT:  BB1(2) ]
 int_add R21 <- R17 R18 clobbers: 1
 sext_i4 R16 <- R21

BEFORE LOWER-VTYPE-OPTS  1: [IN:  BB2(1), OUT:  ]

AFTER LOWER-VTYPE-OPTS  1: [IN:  BB2(1), OUT:  ]

LIVENESS:
BLOCK BB0 (BB2, ):
GEN  BB0: {}
KILL BB0: {}
BLOCK BB2 (BB1, ):
	 int_add R21 <- R17 R18 clobbers: 1
	GEN: R17(1)
	GEN: R18(2)
	 sext_i4 R16 <- R21
	KILL: R16(0)
GEN  BB2: {1, 2}
KILL BB2: {0}
BLOCK BB1 ():
GEN  BB1: {}
KILL BB1: {}

ITERATION:
P: BB1(2): IN: BB2 OUT:
P: BB2(1): IN: BB0 OUT:BB1 
	LIVE IN  BB2: {1, 2}
P: BB0(0): IN: OUT:BB2 
	LIVE IN  BB0: {1, 2}
IT: 3 2.
LIVE IN  BB1: {}
LIVE OUT BB1: {}
LIVE IN  BB2: {1, 2}
LIVE OUT BB2: {}
LIVE IN  BB0: {1, 2}
LIVE OUT BB0: {1, 2}
V0: [0x0 - 0x40005]
V1: [0x0 - 0x40002]
V2: [0x0 - 0x40002]
LIVENESS 2 hello.MainClass:Add (int,int)
LIVENESS BLOCK BB1:
Var R16 live at enter, add range to R16: [80001, bffff)
LIVENESS BLOCK BB2:
	40003:  sext_i4 R16 <- R21
	add range to R16: [40003, 80001)
	40002:  int_add R21 <- R17 R18 clobbers: 1
	last use of R17 set to 40002
	last use of R18 set to 40002
Var R17 live at enter, add range to R17: [40001, 40002)
Var R18 live at enter, add range to R18: [40001, 40002)
LIVENESS BLOCK BB0:
Var R17 live at exit, set last_use to 40001
Var R18 live at exit, set last_use to 40001
Var R16 live at enter, add range to R16: [1, 40001)
Var R17 live at enter, add range to R17: [1, 40001)
Var R18 live at enter, add range to R18: [1, 40001)
COSTLY: hello.MainClass:Add (int,int) R18 G0 C1 %r15
COSTLY: hello.MainClass:Add (int,int) R17 G0 C1 %r14

SPILL BLOCK 0:

SPILL BLOCK 2:
 int_add R21 <- R17 R18 clobbers: 1
	 iii 21 17 18
	1  x86_add_reg_membase R21 <- R23 %rsp clobbers: 1
 sext_i4 R16 <- R21
	 ii  16 21
	1  sext_i4 %rax <- R21

SPILL BLOCK 1:

LOCAL REGALLOC BLOCK 2:
	1  loadi4_membase R23 <- [%rsp + 0x0]
	2  x86_add_reg_membase R21 <- R23 %rsp clobbers: 1
	3  sext_i4 %rax <- R21
liveness: %rax [3 - 3]
liveness: R21 [2 - 2]
liveness: R23 [1 - 1]
processing:	3  sext_i4 %rax <- R21
	assigned sreg1 %rax to R21
	3  sext_i4 %rax <- %rax
processing:	2  x86_add_reg_membase R21 <- R23 %rsp clobbers: 1
	assigned dreg %rax to dest R21
	freeable %rax (R21) (born in 2)
	assigned sreg1 %rax to R23
	2  x86_add_reg_membase %rax <- %rax %rsp clobbers: 1
processing:	1  loadi4_membase R23 <- [%rsp + 0x0]
	assigned dreg %rax to dest R23
	freeable %rax (R23) (born in 1)
	1  loadi4_membase %rax <- [%rsp + 0x0]
CFA: [0] def_cfa: %rsp+0x8
CFA: [0] offset: unknown at cfa-0x8
CFA: [4] def_cfa_offset: 0x20
Basic block 0 starting at offset 0xd
Basic block 2 starting at offset 0xd
Basic block 1 starting at offset 0x17
CFA: [1b] def_cfa: %rsp+0x8
Method hello.MainClass:Add (int,int) emitted at 0x40949bd0 to 0x40949bec (code length 28) [Program.exe]

/tmp/.BnIzFm:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <lo_MainClass_Add>:
<BB>:2
   0:	48 83 ec 18          	sub    $0x18,%rsp
   4:	48 89 3c 24          	mov    %rdi,(%rsp)
   8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
   d:	48 8b c7             	mov    %rdi,%rax
  10:	03 44 24 08          	add    0x8(%rsp),%eax
  14:	48 63 c0             	movslq %eax,%rax
<BB>:1
  17:	48 83 c4 18          	add    $0x18,%rsp
  1b:	c3                   	retq   
Method hello.MainClass:.ctor () emitted as .Lm_0
Method hello.MainClass:Main (string[]) emitted as .Lm_1
Method hello.MainClass:Add (int,int) emitted as .Lm_2
Code: 59(22%) Info: 6(2%) Ex Info: 21(7%) Unwind Info: 34(12%) Class Info: 30(11%) PLT: 10(3%) GOT Info: 11(4%) Offsets: 95(35%) GOT: 56
Compiled: 3/3 (100%), No GOT slots: 3 (100%), Direct calls: 0 (100%)
Executing the native assembler: "as" --64  -o /home/aris/Desktop/di/thesis/hello/Program.exe.o /tmp/mono_aot_lb0B0G
Output file: '/home/aris/Desktop/di/thesis/hello/Program.exe.o'.
Linking symbol: 'mono_aot_module_Program_info'.
JIT time: 30 ms, Generation time: 0 ms, Assembly+Link time: 6 ms.
